function search_string() {
    # Check if a search string is provided
    if [ $# -lt 1 ]; then
      echo "Usage: $0 \"search_string\" [directory]"
      exit 1
    fi

    # Set the search string and directory (defaults to current directory)
    search_string="$1"
    directory="${2:-.}"

    # Recursively search for the string in the specified directory
    grep -R "$search_string" "$directory" 
}

function arc-links-to-md() {
    # Проверяем, есть ли аргументы
    if [ "$#" -eq 0 ]; then
        echo "Введите ссылки (по одной в строке), затем Ctrl+D для завершения ввода:"
        input=()
        while read -r line; do
            input+=("$line")
        done
    else
        input=("$@")
    fi

    # Обрабатываем ссылки и формируем Markdown-список
    for url in "${input[@]}"; do
        if [[ $url =~ https://st.yandex-team.ru/([A-Za-z0-9-]+) ]]; then
            id="${BASH_REMATCH[1]}"
            echo "- [$id]($url)"
        fi
    done
}

function brew-update() {
    brew update && brew upgrade && brew upgrade --cask && brew cleanup
}

normalize_after_anytype() {
    # Script to rename markdown files based on their H1 header
    # Finds all .md files in current directory and renames them to their title

    echo "Starting to process markdown files..."

    # Counter for statistics
    local success_count=0
    local skipped_count=0
    local error_count=0

    # Process each .md file in the current directory
    for file in *.md; do
        # Skip if no files match the pattern
        [ -e "$file" ] || continue
        
        # Read the first line of the file
        local first_line=$(head -n 1 "$file")
        
        # Extract title if line starts with # and has content after it
        if [[ "$first_line" == \#* ]]; then
            # Remove the # and any leading whitespace after it
            local title=$(echo "$first_line" | sed 's/^#\s*//')
            
            # Remove any leading/trailing whitespace
            title=$(echo "$title" | xargs)
            
            # If title is empty after removing the #, use the original filename
            if [[ -z "$title" ]]; then
                echo "Warning: Empty title in $file, using filename instead"
                title="${file%.md}"
            fi
            
            # Create the new filename with .md extension
            local new_filename="${title}.md"
            
            # Skip if the new filename is the same as the old one
            if [ "$file" = "$new_filename" ]; then
                echo "Skipping $file (already named correctly)"
                skipped_count=$((skipped_count + 1))
                continue
            fi
            
            echo "Renaming: $file -> $new_filename"
            
            # Rename the file
            mv -i "$file" "$new_filename"
            
            # Check if the rename was successful
            if [ $? -eq 0 ]; then
                echo "Successfully renamed: $file -> $new_filename"
                
                # Remove only the first line from the file
                sed -i.bak '1d' "$new_filename" && rm -f "$new_filename.bak"
                echo "Removed H1 header from $new_filename"
                
                success_count=$((success_count + 1))
            else
                echo "Error renaming: $file -> $new_filename"
                error_count=$((error_count + 1))
            fi
        else
            echo "No markdown header found in $file, skipping"
            skipped_count=$((skipped_count + 1))
        fi
    done

    # Print statistics
    echo "Finished processing markdown files."
    echo "Successfully renamed: $success_count files"
    echo "Skipped: $skipped_count files"
    echo "Errors: $error_count files"
}

convert_links() {
    # Directory to process (current directory by default)
    DIR="."

    # Check if a directory is provided as an argument
    if [ $# -gt 0 ]; then
        DIR="$1"
    fi

    # Ensure the directory exists
    if [ ! -d "$DIR" ]; then
        echo "Error: Directory $DIR does not exist."
        exit 1
    fi

    # Check if running on Mac OS (BSD sed) or Linux (GNU sed)
    if [[ "$(uname)" == "Darwin" ]]; then
        # macOS/BSD sed requires an extension for -i, even if it's empty
        echo "Running on macOS, using BSD sed syntax..."
        find "$DIR" -type f | while read -r file; do
            # Skip binary files and only process text files
            if file "$file" | grep -q "text"; then
                sed -i '' 's/\[\([^]]*\)\]([^)]*\.md)/[[\1]]/' "$file"
                echo "Processed: $file"
            fi
        done
    else
        # Linux/GNU sed syntax
        echo "Running on Linux, using GNU sed syntax..."
        find "$DIR" -type f | while read -r file; do
            # Skip binary files and only process text files
            if file "$file" | grep -q "text"; then
                sed -i 's/\[\([^]]*\)\]([^)]*\.md)/[[\1]]/' "$file"
                echo "Processed: $file"
            fi
        done
    fi

    echo "Conversion completed."
}
