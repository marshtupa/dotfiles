#!/usr/bin/env python3
"""
VPN Routes Collector
–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
"""

import subprocess
import re
import json
import ipaddress
from datetime import datetime
from typing import List, Dict, Set

class VPNRoutesCollector:
    def __init__(self):
        self.routes = []
        self.vpn_interface = None
        self.vpn_gateway = None
        
    def find_vpn_interface(self) -> str:
        """–ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π VPN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (utun)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ scutil
            result = subprocess.run(
                ['scutil'], 
                input='show State:/Network/OpenVPN\n', 
                capture_output=True, 
                text=True
            )
            
            match = re.search(r'TunnelDevice\s*:\s*(\w+)', result.stdout)
            if match:
                self.vpn_interface = match.group(1)
                return self.vpn_interface
                
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ utun –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            result = subprocess.run(['ifconfig'], capture_output=True, text=True)
            for line in result.stdout.split('\n'):
                if 'utun' in line and 'UP' in line:
                    self.vpn_interface = line.split(':')[0]
                    return self.vpn_interface
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ VPN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            
        return None
        
    def get_vpn_gateway(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å gateway VPN"""
        if not self.vpn_interface:
            return None
            
        try:
            result = subprocess.run(
                ['netstat', '-rn'], 
                capture_output=True, 
                text=True
            )
            
            for line in result.stdout.split('\n'):
                if self.vpn_interface in line:
                    parts = line.split()
                    if len(parts) >= 2 and parts[1].startswith('10.'):
                        self.vpn_gateway = parts[1]
                        return self.vpn_gateway
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ gateway: {e}")
            
        return None
        
    def collect_routes_netstat(self) -> List[Dict]:
        """–°–æ–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ netstat"""
        routes = []
        
        try:
            result = subprocess.run(
                ['netstat', '-rn', '-f', 'inet'], 
                capture_output=True, 
                text=True
            )
            
            for line in result.stdout.split('\n'):
                if self.vpn_gateway and self.vpn_gateway in line:
                    parts = line.split()
                    if len(parts) >= 3 and not line.startswith('default'):
                        network = parts[0]
                        gateway = parts[1]
                        netmask = parts[2] if not parts[2].startswith('U') else None
                        
                        if netmask and '.' in netmask:
                            try:
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CIDR
                                cidr = sum(bin(int(x)).count('1') for x in netmask.split('.'))
                                routes.append({
                                    'network': network,
                                    'netmask': netmask,
                                    'cidr': cidr,
                                    'gateway': gateway,
                                    'interface': self.vpn_interface
                                })
                            except:
                                pass
                                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —á–µ—Ä–µ–∑ netstat: {e}")
            
        return routes
        
    def collect_routes_from_log(self, log_path: str = None) -> List[Dict]:
        """–°–æ–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ –ª–æ–≥–∞ OpenVPN"""
        routes = []
        
        if not log_path:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
            log_paths = [
                '/Library/Application Support/Tunnelblick/Logs/*.openvpn.log',
                '~/Library/Application Support/Tunnelblick/Logs/*.openvpn.log'
            ]
            
            import glob
            import os
            
            for path in log_paths:
                files = glob.glob(os.path.expanduser(path))
                if files:
                    log_path = max(files, key=os.path.getmtime)
                    break
                    
        if not log_path:
            return routes
            
        try:
            with open(log_path, 'r') as f:
                content = f.read()
                
            # –ò—â–µ–º PUSH_REPLY —Å–æ–æ–±—â–µ–Ω–∏—è
            push_replies = re.findall(r'PUSH_REPLY[,:]([^\'"\n]+)', content)
            
            for reply in push_replies:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
                route_matches = re.findall(r'route\s+(\S+)\s+(\S+)', reply)
                for network, netmask in route_matches:
                    if network and netmask and '.' in netmask:
                        try:
                            cidr = sum(bin(int(x)).count('1') for x in netmask.split('.'))
                            routes.append({
                                'network': network,
                                'netmask': netmask,
                                'cidr': cidr,
                                'source': 'log'
                            })
                        except:
                            pass
                            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")
            
        return routes
        
    def expand_network_to_ips(self, network: str, cidr: int) -> List[str]:
        """–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ç—å –≤ —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤"""
        try:
            net = ipaddress.IPv4Network(f"{network}/{cidr}", strict=False)
            # –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ç–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∏–∞–ø–∞–∑–æ–Ω
            if net.num_addresses > 1024:
                return [f"{network}/{cidr} ({net.num_addresses} addresses)"]
            else:
                return [str(ip) for ip in net.hosts()]
        except:
            return []
            
    def collect_all_routes(self):
        """–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üîç –ü–æ–∏—Å–∫ VPN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        self.find_vpn_interface()
        
        if not self.vpn_interface:
            print("‚ùå VPN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω.")
            return
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω VPN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {self.vpn_interface}")
        
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ VPN gateway...")
        self.get_vpn_gateway()
        
        if self.vpn_gateway:
            print(f"‚úÖ VPN gateway: {self.vpn_gateway}")
        
        print("üìä –°–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑ netstat
        routes_netstat = self.collect_routes_netstat()
        print(f"  - –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ netstat: {len(routes_netstat)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑ –ª–æ–≥–æ–≤
        routes_log = self.collect_routes_from_log()
        print(f"  - –ù–∞–π–¥–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö: {len(routes_log)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        all_routes = {}
        for route in routes_netstat + routes_log:
            key = f"{route['network']}/{route.get('cidr', '?')}"
            all_routes[key] = route
            
        self.routes = list(all_routes.values())
        
    def save_results(self, format='all'):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self.routes.sort(key=lambda x: (x.get('network', '').split('.'), x.get('cidr', 0)))
        
        # JSON —Ñ–æ—Ä–º–∞—Ç
        if format in ['json', 'all']:
            with open(f'vpn_routes_{timestamp}.json', 'w') as f:
                json.dump({
                    'timestamp': timestamp,
                    'vpn_interface': self.vpn_interface,
                    'vpn_gateway': self.vpn_gateway,
                    'routes': self.routes
                }, f, indent=2)
                
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å CIDR –Ω–æ—Ç–∞—Ü–∏–µ–π
        if format in ['txt', 'all']:
            with open(f'vpn_routes_{timestamp}.txt', 'w') as f:
                f.write(f"# VPN Routes collected at {timestamp}\n")
                f.write(f"# VPN Interface: {self.vpn_interface}\n")
                f.write(f"# VPN Gateway: {self.vpn_gateway}\n\n")
                
                for route in self.routes:
                    f.write(f"{route['network']}/{route.get('cidr', '?')}\n")
                    
        # –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
        if format in ['sh', 'all']:
            with open(f'vpn_routes_{timestamp}.sh', 'w') as f:
                f.write("#!/bin/bash\n")
                f.write(f"# VPN Routes script generated at {timestamp}\n")
                f.write(f"# Usage: sudo ./vpn_routes_{timestamp}.sh add|delete\n\n")
                
                f.write("ACTION=${1:-add}\n")
                f.write(f"GATEWAY={self.vpn_gateway}\n\n")
                
                for route in self.routes:
                    f.write(f'route $ACTION -net {route["network"]} ')
                    f.write(f'-netmask {route.get("netmask", "255.255.255.0")} ')
                    f.write(f'$GATEWAY\n')
                    
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            import os
            os.chmod(f'vpn_routes_{timestamp}.sh', 0o755)
            
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É"""
        print("\nüìã –°–í–û–î–ö–ê:")
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(self.routes)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP
        total_ips = 0
        networks_by_size = {}
        
        for route in self.routes:
            try:
                cidr = route.get('cidr', 32)
                net = ipaddress.IPv4Network(f"{route['network']}/{cidr}", strict=False)
                total_ips += net.num_addresses
                
                size_key = f"/{cidr}"
                if size_key not in networks_by_size:
                    networks_by_size[size_key] = []
                networks_by_size[size_key].append(route['network'])
                
            except:
                pass
                
        print(f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP-–∞–¥—Ä–µ—Å–æ–≤: {total_ips:,}")
        
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —Å–µ—Ç–µ–π:")
        for size, networks in sorted(networks_by_size.items()):
            print(f"  {size}: {len(networks)} —Å–µ—Ç–µ–π")
            
        print("\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π:")
        for i, route in enumerate(self.routes[:10]):
            print(f"  - {route['network']}/{route.get('cidr', '?')}")
        if len(self.routes) > 10:
            print(f"  ... –∏ –µ—â–µ {len(self.routes) - 10} –º–∞—Ä—à—Ä—É—Ç–æ–≤")


def main():
    print("üöÄ VPN Routes Collector")
    print("=" * 50)
    
    collector = VPNRoutesCollector()
    collector.collect_all_routes()
    
    if collector.routes:
        collector.save_results('all')
        collector.print_summary()
        
        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã:")
        print("  - vpn_routes_*.json - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ JSON")
        print("  - vpn_routes_*.txt - —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π –≤ CIDR –Ω–æ—Ç–∞—Ü–∏–∏")
        print("  - vpn_routes_*.sh - —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤")
    else:
        print("\n‚ùå –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN.")


if __name__ == "__main__":
    main()
